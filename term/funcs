#!/bin/bash
# c00kiemon5ter (ivan.kanak@gmail.com) ~ under c00kiez License

function setcolors() {
	DARK=$(tput setaf 0)
	RED=$(tput setaf 1)
	GREEN=$(tput setf 2)
	ORANGE=$(tput setaf 3)
	LIGHTBLUE=$(tput setaf 4)
	MAUV=$(tput setaf 5)
	DARKGREY=$(tput setaf 6)
	WHITE=$(tput setaf 7)	
	
	BOLDDARK=$(tput setaf 8)
	BOLDRED=$(tput setaf 9)
	BOLDGREEN=$(tput setaf 10)
	GOLD=$(tput setaf 11)
	BLUE=$(tput setaf 12)
	PURPLE=$(tput setaf 13)
	GREY=$(tput setaf 14)
	BOLDWHITE=$(tput setaf 15)

	BLACK=$(tput setaf 16)
	NORMAL=$(tput sgr0) # reset
	DIM=$(tput dim)
	BOLD=$(tput bold)
	UNDRLN=$(tput smul)
	RMUNDRLN=$(tput rmul)
	BLINK=$(tput blink)
	REVERSE=$(tput rev)
	INVISIBLE=$(tput invis)
}

function reduce_path() {
	local path="${PWD/#$HOME/~}"
	local maxlen="$(( $(tput cols) -8 -${#USER} -${#HOSTNAME} ))"
	local prefix=".."
	if [ ${#path} -gt ${maxlen} ]; then
		local path="${prefix}${path:$((${#path} -${maxlen} +${#prefix}))}"
	fi
	echo "$path"
}

function git_prompt() {
	local pre="${WHITE}[branch: ${PURPLE}"
	local suf="${WHITE}]${NORMAL}"
	local ref=$(git symbolic-ref HEAD 2> /dev/null)
	[ "$ref" = "" ] && return
	git status | grep "not updated" &>/dev/null && ref="${ref}${GREEN}!"
	git status | grep "Untracked" &>/dev/null && ref="${ref}${GREEN}?"
	echo ${pre}${ref#refs/heads/}${suf}
}

function prompt(){
	local path="$(reduce_path)"
	#PS1="\n\[\e[0;33m\]\u\[\e[0m\] on \[\e[0;34m\]\h\[\e[0m\] in \[\e[1;33m\]${path}\n\[\e[0;36m\]>\[\e[0;36m\]>\[\e[0;32m\]>\[\e[0m\] "
	PS1="\n\[${ORANGE}\]\u \[${WHITE}\]on \[${BLUE}\]\h \[${WHITE}\]in \[${GOLD}\]${path} $(git_prompt)\n\[${DARKGREY}\]>>\[${GREEN}\]>\[${NORMAL}\] "
}

function wazaaa(){
	local qdb="${HOME}/docs/archquotes.txt" # quotes database
	local who="${BOLD}${WHITE}Arch${BLUE}Linux${NORMAL}" # length is 9
	local say="${WHITE}$(shuf -n1 $qdb)" # pick a random quote
	local spc="$(($(tput cols) -9 -${#say} -2))"
	echo -e "${who} $(yes ' ' | head -${spc} | tr -d '\n') ${say}${NORMAL}"
}

# cd helper
function goto() { 
	[ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; 
}
# copy and follow
function cpf() { 
	cp "$@" && goto "$_"; 
}
# move and follow
function mvf() { 
	mv "$@" && goto "$_"; 
}

## services
function start() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg start
	done
}
function stop() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg stop
	done
}
function restart() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg restart
	done
}
function status() {
	for	arg in $@
	do
		sudo /etc/rc.d/$arg status
	done
}

# funny quotes from bash.org @irc
function bashfortune() {
curl -s http://bash.org/?random1|grep -oE "<p class=\"quote\">.*</p>.*</p>"|grep -oE "<p class=\"qt.*?</p>"|sed -e 's/<\/p>/\n/g' -e 's/<p class=\"qt\">//g' -e 's/<p class=\"qt\">//g'|perl -ne 'use HTML::Entities;print decode_entities($_),"\n"'|head -1
}

# Easy extract
# TODO: extended capbilities 
# to accept more arguments
function extract() {
if [ -f $1 ] ; then
	case $1 in
		*.tar.bz2)   tar xvjf $1    ;;
	*.tar.gz)    tar xvzf $1    ;;
*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar x $1       ;;
		*.gz)        gunzip $1      ;;
	*.tar)       tar xvf $1     ;;
*.tbz2)      tar xvjf $1    ;;
			*.tgz)       tar xvzf $1    ;;
		*.zip)       unzip $1       ;;
	*.Z)         uncompress $1  ;;
*.7z)        7z x $1        ;;
			*)           echo "don't know how to extract '$1'..." ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Makes directory then moves into it
function mkcdr() { 
mkdir -vp "$@" && cd "$_"; 
}

# creates an archive from given directory
function mktar() { 
tar cvf  "${1%%/}.tar"     "${1%%/}/"; 
}
function mktgz() { 
tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; 
}
function mktbz() { 
tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; 
}

# Convert any flash.flv to matroska.mkv
function flv2mkv()
{
	mkdir mkv
	for f in *.flv
	do
		ffmpeg -i $f -vcodec copy -sameq -acodec copy -f matroska mkv/${f%.*}.mkv
	done
}

# Setup empty github repo
function mkgit()
{
	mkdir $1
	cd $1
	git init
	touch README
	git add README
	git commit -m 'inital setup - automated'
	git remote add origin git@github.com:crshd/$1.git
	git push origin master
}

# Look up the definition of a word
function dict() {
curl -s dict://dict.org/d:$1 | perl -ne 's/\r//; last if /^\.$/; print if /^151/../^250/';
}

# screenshot with style
function scrotshot() {
cowthink -d $(fortune -eas) && echo && echo && uname -a && echo && emerge --info | head -n1 && echo && tname && scrot -cd5 -q100 '%F_%T_$wx$h_scrot.png'
}

function sprunge() {
curl -F 'sprunge=<-' http://sprunge.us
}
function fsprunge() {
curl -F 'sprunge=<-' http://sprunge.us < $1
}

#alias tname="echo -ne \"\033]0;${1:-$TERM}\007\""
function tname(){
echo -ne "\033]0;${1:-$TERM}\007";
}

function cpcd(){ 
cp $@ /home/c00kiemon5ter/mp3cd/
}

function bgmplayer(){
mplayer $1 -novideo &>/dev/null </dev/null &
}

# vim: nospell
